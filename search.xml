<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS用CallKit实现来电识别、来电拦截]]></title>
    <url>%2F2018%2F03%2F03%2FiOS%E7%94%A8CallKit%E5%AE%9E%E7%8E%B0%E6%9D%A5%E7%94%B5%E8%AF%86%E5%88%AB%26%E6%9D%A5%E7%94%B5%E6%8B%A6%E6%88%AA%2F</url>
    <content type="text"><![CDATA[前言 最近需要实现一个新需求，用iOS 10出的CallKit实现将APP的通讯录的信息同步到系统中，可以不把人员信息加到通讯录中，实现来电号码识别。这个功能在xx安全卫士、xx管家中很早就实现了，但是网上相关的资料较少，而且官方的文档写的太简单了，很多坑还要自己去摸索。于是记录一下和各位分享，如有错误之处请各位指出！ PS: 先说个题外话吧，CallKit功能在iOS 10的时候还不太稳定，iOS 10刚出来的时候为了体验骚扰拦截功能，手贱装了两个不同的拦截APP，然后就悲剧了。盗一张网上的图： 然后各种重启、重装APP都没有用，写的Demo也跑不起来，唯一的办法只有重置系统。说多了都是泪！ 本文涉及的Demo。 一、Call Directory app extension实现来电识别、来电拦截功能需要使用CallKit当中的Call Directory app extension，首先，需要了解extension。关于extension网上有很多教程，这里就不细说了。推荐两篇文章，英文好的推荐看官方文档，还有一篇中文博客。 使用Call Directory Extension主要需要和3个类打交道，分别是CXCallDirectoryProvider、CXCallDirectoryExtensionContext、CXCallDirectoryManager。 CXCallDirectoryProvider 官方文档：The principal object for a Call Directory app extension for a host app. 正如官方文档所说，这是Call Directory app extension最重要的一个类。用系统模板新建Call Directory Extension之后会自动生成一个类，继承自CXCallDirectoryProvider。入口方法：123456789// 有两种情况改方法会被调用// 1.第一次打开设置-电话-来电阻止与身份识别开关时，系统自动调用// 2.调用CXCallDirectoryManager的reloadExtensionWithIdentifier方法会调用- (void)beginRequestWithExtensionContext:(CXCallDirectoryExtensionContext *)context &#123; context.delegate = self; // 添加号码识别信息与号码拦截列表 [self addIdentificationPhoneNumbersToContext:context]; [context completeRequestWithCompletionHandler:nil];&#125; CXCallDirectoryExtensionContext 官方文档：A programmatic interface for adding identification and blocking entries to a Call Directory app extension.CXCallDirectoryExtensionContext objects are not initialized directly, but are instead passed as arguments to the CXCallDirectoryProvider instance method beginRequestWithExtensionContext:. 大致意思就是说，这是一个为Call Directory app extension添加号码识别、号码拦截的入口。CXCallDirectoryExtensionContext不需要自己初始化，它会作为CXCallDirectoryProvider的beginRequestWithExtensionContext函数的参数传递给使用者。它的主要方法有两个： 12345// 设置号码识别信息- (void)addIdentificationEntryWithNextSequentialPhoneNumber:(CXCallDirectoryPhoneNumber)phoneNumber label:(NSString *)label;// 设置号码拦截列表- (void)addBlockingEntryWithNextSequentialPhoneNumber:(CXCallDirectoryPhoneNumber)phoneNumber; 在设置时候要注意： 号码不能重复，不然会报错CXErrorCodeCallDirectoryManagerErrorDuplicateEntries 号码必须按照升序写入，不然会报错CXErrorCodeCallDirectoryManagerErrorEntriesOutOfOrder 号码必须格式化后传入，手机号码必须加上国家码，例如18012341234就不行，需要加上86，构造成8618012341234；固话需要格式为：国家码+区号（去掉第一个0）+号码，例如010-61001234格式化之后为，861061001234。如果号码格式错误，会导致识别不出来。 上限数据是200万（在其它文章里看到的，然后自己测试了下，构造了200万条数据写入的时候会报错CXErrorCodeCallDirectoryManagerErrorMaximumEntriesExceeded，150万条数据是OK的，所以这个数据上限一定要注意。实测安装了XX安全卫士、XX管家实现骚扰电话拦截用了3个extension，可能数据量太大就是一个原因。） 在用户第一次打开设置时，会调用beginRequestWithExtensionContext，这时候不宜写太多数据，不然会卡在设置那里转圈，用户体验很差。可以先写部分数据，然后回到主APP了调用reloadExtensionWithIdentifier去刷新。 CXCallDirectoryManager 官方文档：The programmatic interface to an object that manages a Call Directory app extension. CXCallDirectoryManager主要作用是管理Call Directory app extension。有两个方法： 123456// 重新设置号码识别、电话拦截列表// 调用该方法后会重置之前设置的列表，然后调用beginRequestWithExtensionContext:- (void)reloadExtensionWithIdentifier:(NSString *)identifier completionHandler:(nullable void (^)(NSError *_Nullable error))completion;// 获取extension是否可用，需要在“设置-电话-来电阻止与身份识别"中开启权限- (void)getEnabledStatusForExtensionWithIdentifier:(NSString *)identifier completionHandler:(void (^)(CXCallDirectoryEnabledStatus enabledStatus, NSError *_Nullable error))completion; 二、实战 先上Demo地址。下面会一步步讲解。 创建extension新建一个Target（File-New-Target）。 会自动建立一个目录，默认有三个文件。在.m文件中有系统给出的示例代码 我们来看看系统的模板代码，首先是入口函数 1234567891011121314- (void)beginRequestWithExtensionContext:(CXCallDirectoryExtensionContext *)context &#123; context.delegate = self; if (context.isIncremental) &#123; [self addOrRemoveIncrementalBlockingPhoneNumbersToContext:context]; [self addOrRemoveIncrementalIdentificationPhoneNumbersToContext:context]; &#125; else &#123; [self addAllBlockingPhoneNumbersToContext:context]; [self addAllIdentificationPhoneNumbersToContext:context]; &#125; [context completeRequestWithCompletionHandler:nil];&#125; CallDirectoryHandler我在Xcode 9生成的代码，context.isIncremental是iOS 11才增加的，还有所有的remove的方法也是iOS 11才有的，为了适配iOS 10，还是不推荐使用。系统模板代码大致逻辑就是，先添加号码识别、号码拦截记录，添加完成后调用completeRequestWithCompletionHandler:完成整个过程。由于号码拦截比较简单，只是写入一个号码的数组，本文就以号码识别为例，号码识别方法系统模板这么写的：12345678910- (void)addAllIdentificationPhoneNumbersToContext:(CXCallDirectoryExtensionContext *)context &#123; CXCallDirectoryPhoneNumber allPhoneNumbers[] = &#123; 8618788888888, 8618885555555 &#125;; NSArray&lt;NSString *&gt; *labels = @[ @"送餐电话", @"诈骗电话" ]; NSUInteger count = (sizeof(allPhoneNumbers) / sizeof(CXCallDirectoryPhoneNumber)); for (NSUInteger i = 0; i &lt; count; i += 1) &#123; CXCallDirectoryPhoneNumber phoneNumber = allPhoneNumbers[i]; NSString *label = labels[i]; [context addIdentificationEntryWithNextSequentialPhoneNumber:phoneNumber label:label]; &#125;&#125; 这么多代码，核心就是一行[context addIdentificationEntryWithNextSequentialPhoneNumber:phoneNumber label:label];,注意phoneNumber是CXCallDirectoryPhoneNumber类型，其实就是long long类型。在这个函数里，需要把需要识别的号码和识别信息，一条一条的写入 检查授权开启extension功能需要在“设置-电话-来电阻止与身份识别”中开启，我们在写入数据时第一步是引导用户给我们的extension授权。123456789 CXCallDirectoryManager *manager = [CXCallDirectoryManager sharedInstance]; [manage getEnabledStatusForExtensionWithIdentifier:self.externsionIdentifier completionHandler:^(CXCallDirectoryEnabledStatus enabledStatus, NSError * _Nullable error) &#123; // 根据error，enabledStatus判断授权情况// error == nil &amp;&amp; enabledStatus == CXCallDirectoryEnabledStatusEnabled 说明可用// error 见 CXErrorCodeCallDirectoryManagerError// enabledStatus 见 CXCallDirectoryEnabledStatus &#125;]; 写入数据用户在设置开启后，调用reloadExtensionWithIdentifier即可触发CallDirectoryHandler更新数据逻辑。 1234CXCallDirectoryManager *manager = [CXCallDirectoryManager sharedInstance];[manager reloadExtensionWithIdentifier:self.externsionIdentifier completionHandler:^(NSError * _Nullable error) &#123; // error 见 CXErrorCodeCallDirectoryManagerError&#125;]; 验证接下来在真机下跑下（一定要在插了电话卡的iPhone上调试，模拟器不行！），写入成功后，打开电话，拨号18788888888，提示”送餐电话”。说明写入成功！ 三、extension和containing app数据共享上面的步骤中，号码信息是写死在代码中的，在实际应用中这些号码信息肯定不是写死的，一般需要从服务器获取。这就需要我们的APP与extension进行通信，需要用到APP Groups，怎么用网上有很多文章了，我就不多说了，推荐一篇。其实本质就是通过APP Groups，开辟一片空间，extension和containing app都可以访问，然后我们的APP就可以通过NSUserDefaults、文件、数据库等方式共享数据给extension了。前期我使用过NSUserDefaults，效率很低，大概在5万数据的时候就爆内存了，使用extension一定要注意内存，不然很容易被系统干掉，所以不推荐使用这种方式。Demo中采用的是读写文件的方式，大致思路（具体实现看Demo）： 在APP中把数据序列化之后写到一个文件中 在extension中读取这个文件，读取一行，调用一次addIdentificationEntryWithNextSequentialPhoneNumber，然后及时释放这种方式理论上是可以达到最大限制200w条的（实际测试150万没有问题）。 获取APP Groups文件路径1234NSFileManager *fileManager = [NSFileManager defaultManager]; NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:self.groupIdentifier]; containerURL = [containerURL URLByAppendingPathComponent:@"CallDirectoryData"]; NSString* filePath = containerURL.path; 进度监控在xx安全卫士中，开启骚扰电话拦截功能有一个进度条，非常的直观。但是在extension中是没法更新UI的，有一种实现方式，可以用开源框架MMWormhole来实现APP与extension通信，然后把进度从extension传到APP中，在APP中更新进度条。理论上该方案是可行的，感兴趣的同学可以尝试下。 参考链接https://developer.apple.com/documentation/callkithttps://developer.apple.com/videos/play/wwdc2016/230/https://colin1994.github.io/2016/06/17/Call-Directory-Extension-Study/https://yunissong.github.io/2017/03/29/CallKit/http://www.jianshu.com/p/7f88cbe7948chttps://www.raywenderlich.com/150015/callkit-tutorial-ios]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS的Cookie管理]]></title>
    <url>%2F2018%2F03%2F01%2FiOS%E7%9A%84Cookie%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[背景最近有一个需求，需要手动的去缓存cookie，然后启动APP的时候设置缓存过的cookie，项目网络框架用的是Afnetworking。 解决方案翻了下Afnetworking的issue，发现了作者对于cookie的解释 Afnetworking没有对Cookie做过处理 使用NSHTTPCookieStorage即可实现cookie的管理。上代码！ 存cookie 1234NSArray *cookies = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookiesForURL:[NSURL URLWithString:url]];NSData *data = [NSKeyedArchiver archivedDataWithRootObject:cookies];NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];[userDefaults setObject:data forKey:@&quot;cookie&quot;]; 设置cookie 12345678NSData *cookiesdata = [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;m3cookie&quot;]; if([cookiesdata length]) &#123; NSArray *cookies = [NSKeyedUnarchiver unarchiveObjectWithData:cookiesdata]; NSHTTPCookie *cookie; for (cookie in cookies) &#123; [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookie]; &#125; &#125; 清理cookie 12345NSHTTPCookie *cookie;NSHTTPCookieStorage *storage = [NSHTTPCookieStorage sharedHTTPCookieStorage];for (cookie in [storage cookies]) &#123; [storage deleteCookie:cookie];&#125; 参考文章： NSHTTPCookieStorage官方文档Persisting Cookies In An iOS Application?Clear cookies for response in AFNetworking 2]]></content>
  </entry>
  <entry>
    <title><![CDATA[imageNamed与imageWithContentsOfFile小结]]></title>
    <url>%2F2018%2F03%2F01%2FimageNamed%E4%B8%8EimageWithContentsOfFile%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本文主要讲imageNamed与imageWithContentsOfFile的差异，需要注意的点，与实战中遇到的坑。 好久没写过博客了，什么工作太忙，加班太晚我就不说了，都怪自己太懒😂，时间都是挤出来的。看着各位大牛写的文章，简直过瘾，希望有一天自己也能写出这么高质量、干货密集的文章，先从简单的做起吧。 从差异说起从磁盘加载图片，UIImage主要提供了两种方式： +(UIImage )imageNamed:(NSString )name;+(UIImage )imageWithContentsOfFile:(NSString )path; 关于这两种方法的使用时机，苹果官方文档描述如下： Use the imageNamed:inBundle:compatibleWithTraitCollection: method (or the imageNamed: method) to create an image from an image asset or image file located in your app’s main bundle (or some other known bundle). Because these methods cache the image data automatically, they are especially recommended for images that you use frequently.Use the imageWithContentsOfFile: or initWithContentsOfFile: method to create an image object where the initial data is not in a bundle. These methods load the image data from disk each time, so you should not use them to load the same image repeatedly. 也就是说，imageNamed:第一次加载图片时会缓存图片到内存，适合使用频繁的图片，imageWithContentsOfFile:不会把图片缓存到内存，每次调用都要重新从磁盘加载一次。在实际使用中我们要根据业务来判断调用具体的方法，来最优化内存与性能。举个例子： 登陆背景图，只会在用户登陆的时候使用，而且图片较大，就建议用imageWithContentsOfFile:加载； 底导航图标，图标较小，使用频繁，就建议使用imageNamed:加载； imageNamed:方法还有个限制，它是在main bundle里找图片，如果图片放在Images.xcassets或者直接把图片方在工程里，参数直接传图片名可以找到。像我司的图片是放在单独建立的bundle里，如果要用imageNamed:加载的话文件名前面就要加上bundle名，像这样a.bundle/b.png。 屏幕适配问题iOS的图片文件需要提供3种尺寸的1x、2x、3x，根据不同的屏幕尺寸我们需要加载不同的图片，关于不同屏幕的图片加载，苹果已经帮我们封装好了，我们只需要将3中尺寸的图片放到工程中，然后调用imageNamed:或者imageWithContentsOfFile:，它会自动根据屏幕尺寸来加载不同的图片。关于imageNamed:，官方文档中有这么一段讨论： This method looks in the system caches for an image object with the specified name and returns the variant of that image that is best suited for the main screen. imageWithContentsOfFile:还没找到官方文档的说明（如果各位知道，欢迎各位大牛在评论中提出），不过我测试过是可以的。 使用imageWithContentsOfFile的一个坑在使用imageWithContentsOfFile:加载图片的时候遇到一个坑，先上代码： 1234567+ (UIImage *)imageWithName:(NSString *)name type:(NSString *)type inBundle:(NSString *)bundle &#123; NSString *imageBundlePath = [[NSBundle mainBundle] pathForResource:bundle ofType:@&quot;bundle&quot;]; NSBundle *imageBundle = [NSBundle bundleWithPath:imageBundlePath]; NSString *imagePath = [imageBundle pathForResource:name ofType:type]; UIImage *image = [UIImage imageWithContentsOfFile:imagePath]; return image;&#125; 很简单的一个函数，就是获取bundle全路径，然后再获取到bundle里图片的全路径，然后调用imageWithContentsOfFile:加载图片。在使用的时候也很正常，但是有一天发现某张图加载不出来了。检查资源文件，只有2x的图（又是一个偷懒的程序员。。。很不建议这么玩，虽然只有2x的图，在所有屏幕都能显示，但是会造成图片的压缩与放大，每个细节都很重要！！！），如果加上1x的图就可以加载出来了。经过调试发现问题就出在pathForResource:ofType上，这个函数是精确匹配调用者输入的文件名，不会自动识别文件名后面的@2x。修改后的代码： 12345678+ (UIImage *)imageWithName:(NSString *)name type:(NSString *)type inBundle:(NSString *)bundle &#123; NSString *imageBundlePath = [[NSBundle mainBundle] pathForResource:bundle ofType:@&quot;bundle&quot;]; NSBundle *imageBundle = [NSBundle bundleWithPath:imageBundlePath]; NSString *imageFullName = [name stringByAppendingPathExtension:type]; NSString *imagePath = [[imageBundle resourcePath] stringByAppendingPathComponent:imageFullName]; UIImage *image = [UIImage imageWithContentsOfFile:imagePath]; return image;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[正则表达式笔记]]></title>
    <url>%2F2016%2F11%2F20%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[正则表达式（regular expression）描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的字串做替换或者从某个串中取出符合某个条件的字串等。 正则表达式在线测试：http://www.regexpal.com/ 元字符常用元字符： 代码 说明 . 匹配除换行符以外的任意字符 \w 匹配字母或数字或下划线或汉字 \d 匹配数字 \s 匹配空格 \b 匹配单词的开始或结束 ^ 匹配字符串的开始，如果是处理多行，意义变成行开始处 $ 匹配字符串的结束，如果是处理多行，意义变成行结束处 限定符常用限定符： 代码 说明 * *前面的内容重复任意次 + +前面的内容重复一次或者多次 ? 重复零次或一次 {n} 重复n次 {n, } 重复次数大于等于n {n,m} 重复次数大于等于n小于等于m 字符类[auiou] 匹配任何一个英文元音字母[.?!] 匹配标点符号（. ? !） 反义 代码 说明 \W 匹配任意不是字母、数字、下划线、汉字的字符 \S 匹配任意不是空白符的字符 \D 匹配任意非数字的字符 \B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^abcd] 匹配除了abcd以外的任意字符 分组 代码 说明 (exp) 匹配exp，并捕获文本到自动命名组中 (?&lt;name&gt;exp) 匹配exp,并捕获文本到名称为name的组里，也可以写成(?`name`exp) (?:exp) 匹配exp，不捕获匹配的文本，也不给次分组分配组号 (?=exp) 匹配exp前面的位置 (?&lt;=exp) 匹配exp后面的位置 (?!exp) 匹配后面跟的不是exp的位置 (?&lt;!exp) 匹配前面不是exp的位置 (?#comment) 注释 贪婪与懒惰通常重复限定符的行为是匹配尽可能多的字符，在限定符后面加?使之成为惰性限定符，例如*?的含义为重复任意次数，但是尽可能少]]></content>
  </entry>
  <entry>
    <title><![CDATA[Golang编码规范]]></title>
    <url>%2F2016%2F11%2F20%2FGolang%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[gofmt 大部分的格式问题可以通过gofmt解决，gofmt自动格式化代码，保证所有的go代码与官方推荐的格式保持一致，于是所有格式有关问题，都以gofmt的结果为准。 行长 一行最长不超过80个字符，超过的使用换行展示，尽量保持格式优雅。 注释 在编码阶段应该同步写好变量、函数、包的注释，最后可以利用godoc导出文档。注释必须是完整的句子，句子的结尾应该用句号作为结尾（英文句号）。注释推荐用英文，可以在写代码过程中锻炼英文的阅读和书写能力。而且用英文不会出现各种编码的问题。每个包都应该有一个包注释，一个位于package子句之前的块注释或行注释。包如果有多个go文件，只需要出现在一个go文件中即可。 12// ping包实现了常用的ping相关的函数package ping 导出函数注释，第一条语句应该为一条概括语句，并且使用被声明的名字作为开头。 12// 求a和b的和，返回sum。func Myfunction(sum int) (a, b int) &#123; 命名 需要注释来补充的命名就不算是好命名。 使用可搜索的名称：单字母名称和数字常量很难从一大堆文字中搜索出来。单字母名称仅适用于短方法中的本地变量，名称长短应与其作用域相对应。若变量或常量可能在代码中多处使用，则应赋其以便于搜索的名称。 做有意义的区分：Product和ProductInfo和ProductData没有区别，NameString和Name没有区别，要区分名称，就要以读者能鉴别不同之处的方式来区分 。 函数命名规则：驼峰式命名，名字可以长但是得把功能，必要的参数描述清楚，函数名名应当是动词或动词短语，如postPayment、deletePage、save。并依Javabean标准加上get、set、is前缀。例如：xxx + With + 需要的参数名 + And + 需要的参数名 + ….. 结构体命名规则：结构体名应该是名词或名词短语，如Custome、WikiPage、Account、AddressParser，避免使用Manager、Processor、Data、Info、这样的类名，类名不应当是动词。 包名命名规则：包名应该为小写单词，不要使用下划线或者混合大小写。 接口命名规则：单个函数的接口名以”er”作为后缀，如Reader,Writer。接口的实现则去掉“er”。 123type Reader interface &#123; Read(p []byte) (n int, err error)&#125; 两个函数的接口名综合两个函数名1234type WriteFlusher interface &#123; Write([]byte) (int, error) Flush() error&#125; 三个以上函数的接口名，抽象这个接口的功能，类似于结构体名12345type Car interface &#123; Start([]byte) Stop() error Recover()&#125; 常量 常量均需使用全部大写字母组成，并使用下划线分词： 1const APP_VER = &quot;1.0&quot; 如果是枚举类型的常量，需要先创建相应类型： 123456type Scheme stringconst ( HTTP Scheme = &quot;http&quot; HTTPS Scheme = &quot;https&quot;) 如果模块的功能较为复杂、常量名称容易混淆的情况下，为了更好地区分枚举类型，可以使用完整的前缀： 1234567type PullRequestStatus intconst ( PULL_REQUEST_STATUS_CONFLICT PullRequestStatus = iota PULL_REQUEST_STATUS_CHECKING PULL_REQUEST_STATUS_MERGEABLE) 变量 变量命名基本上遵循相应的英文表达或简写,在相对简单的环境（对象数量少、针对性强）中，可以将一些名称由完整单词简写为单个字母，例如： user 可以简写为 u userID 可以简写 uid若变量类型为 bool 类型，则名称应以 Has, Is, Can 或 Allow 开头： 1234var isExist boolvar hasConflict boolvar canManage boolvar allowGitHook bool 变量命名惯例 变量名称一般遵循驼峰法，但遇到特有名词时，需要遵循以下规则： 如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient 其它情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID 错误示例：UrlArray，应该写成urlArray或者URLArray 下面列举了一些常见的特有名词： 123456789101112131415161718192021222324252627282930313233343536// A GonicMapper that contains a list of common initialisms taken from golang/lintvar LintGonicMapper = GonicMapper&#123; &quot;API&quot;: true, &quot;ASCII&quot;: true, &quot;CPU&quot;: true, &quot;CSS&quot;: true, &quot;DNS&quot;: true, &quot;EOF&quot;: true, &quot;GUID&quot;: true, &quot;HTML&quot;: true, &quot;HTTP&quot;: true, &quot;HTTPS&quot;: true, &quot;ID&quot;: true, &quot;IP&quot;: true, &quot;JSON&quot;: true, &quot;LHS&quot;: true, &quot;QPS&quot;: true, &quot;RAM&quot;: true, &quot;RHS&quot;: true, &quot;RPC&quot;: true, &quot;SLA&quot;: true, &quot;SMTP&quot;: true, &quot;SSH&quot;: true, &quot;TLS&quot;: true, &quot;TTL&quot;: true, &quot;UI&quot;: true, &quot;UID&quot;: true, &quot;UUID&quot;: true, &quot;URI&quot;: true, &quot;URL&quot;: true, &quot;UTF8&quot;: true, &quot;VM&quot;: true, &quot;XML&quot;: true, &quot;XSRF&quot;: true, &quot;XSS&quot;: true,&#125; struct规范 struct申明和初始化格式采用多行： 定义如下： 1234type User struct&#123; Username string Email string&#125; 初始化如下： 1234u := User&#123; Username: &quot;test&quot;, Email: &quot;test@gmail.com&quot;,&#125; 控制结构 ifif接受初始化语句，约定如下方式建立局部变量 123if err := file.Chmod(0664); err != nil &#123; return err&#125; for采用短声明建立局部变量 1234sum := 0for i := 0; i &lt; 10; i++ &#123; sum += i&#125; return尽早return：一旦有错误发生，马上返回 12345678910f, err := os.Open(name)if err != nil &#123; return err&#125;d, err := f.Stat()if err != nil &#123; f.Close() return err&#125;codeUsing(f, d) 错误处理 error作为函数的值返回,必须对error进行处理 错误描述如果是英文必须为小写，不需要标点结尾 采用独立的错误流进行处理 不要采用下面的处理错误写法 12345if err != nil &#123; // error handling&#125; else &#123; // normal code&#125; 采用下面的写法 12345if err != nil &#123; // error handling return // or continue, etc.&#125;// normal code 使用函数的返回值时，则采用下面的方式 123456x, err := f()if err != nil &#123; // error handling return&#125;// use x panic 尽量不要使用panic，除非你知道你在做什么 import 对import的包进行分组管理，用换行符分割，而且标准库作为分组的第一组。如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包 123456789101112package mainimport ( &quot;fmt&quot; &quot;os&quot; &quot;kmg/a&quot; &quot;kmg/b&quot; &quot;code.google.com/a&quot; &quot;github.com/b&quot;) 在项目中不要使用相对路径引入包： 12345// 错误示例import “../net”// 正确的做法import “github.com/repo/proj/src/net” goimports会自动帮你格式化 参数传递 对于少量数据，不要传递指针 对于大量数据的struct可以考虑使用指针 传入参数是map，slice，chan不要传递指针，因为map，slice，chan是引用类型，不需要传递指针的指针 单元测试 单元测试文件名命名规范为 example_test.go测试用例的函数名称必须以 Test 开头，例如：TestExample]]></content>
  </entry>
</search>
